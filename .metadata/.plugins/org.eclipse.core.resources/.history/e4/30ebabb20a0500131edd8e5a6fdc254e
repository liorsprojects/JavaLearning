package com.liorginsberg.threads.executers;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;

public class FutureTaskDemo {

	public static void main(String[] args) throws InterruptedException {
		Callable<Double> myComputation = new MyComputation();
		FutureTask<Double> task = new FutureTask<Double>(myComputation);
		Thread t = new Thread(task);
		t.start();
		Thread.sleep(1000);
		System.out.println("Keep doing thins in the main thread...");
		Thread.sleep(1000);
		System.out.println("Keep doing thins in the main thread...");
		Thread.sleep(1000);
		System.out.println("Keep doing thins in the main thread...");
		Thread.sleep(1000);
		System.out.println("calling task.get()...");
		Double res = null;
		try{
			res = task.get();
		}catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		}
		System.out.println("task.get() returns...");
		System.out.println("result = " + res);
		
		
	}
	
	
	static class MyComputation implements Callable<Double> {

		@Override
		public Double call() throws Exception {
			double[] averages = new double[40];
			for (int i = 0; i < averages.length; i++) {
				double total = 0;
				for(int j = 0; i < 1000000; i++ ) {
					total += Math.random();
				}
				averages[i] = total/1000000;
				
			}
			return null;
		}
		
	}
}
